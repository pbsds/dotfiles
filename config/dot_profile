#
# ~/.profile

[[ -f ~/.extend.profile ]] && . ~/.extend.profile

#export LESS="${LESS}RMQCiwx4"
#export GIT_PAGER="less -eFRX"

# PATH
export PATH=$PATH:~/.local/bin
if [ -d ~/.cargo/bin ]; then
	# RUST
	export PATH=$PATH:~/.cargo/bin
fi

alias ip="ip -br -color"

# direnv
if which direnv > /dev/null; then
	eval "$(direnv hook bash)"
fi

# Micro
export EDITOR=nano
if which micro > /dev/null; then
    export EDITOR=micro
    if [ "$COLORTERM" = "truecolor" ] || [ "$TERM" == "xterm" ]; then
	    export TERM=xterm-256color
	    export MICRO_TRUECOLOR=1
    fi
fi
alias ed=$EDITOR # ed is the standard editor
alias edl="$EDITOR -colorscheme bubblegum " # micro dependent, lol
alias eds="$EDITOR -colorscheme simple " # micro dependent, lol

# .profile shorthand
alias ep='$EDITOR ~/.profile ~/.extend.profile && source ~/.profile'
alias sr='echo sourcing profiles.... ; source ~/.profile'

# bash navigation
alias ll="ls -l"
alias dush="du -shc * | sort -h"
alias diff="diff -u --color"

# allows you to use aliases with sudo:
alias sudo='sudo '
alias xargs='xargs '

# enable recursive globbing:
shopt -s globstar

# pacman sanity
if which pacman > /dev/null; then
	alias pac='pacman -S'     # install
	alias pacu='pacman -Syu'  # update, add 'a' to the list of letters to update AUR packages
	alias pacr='pacman -Rs'   # remove
	alias pacs='pacman -Ss'   # search
	alias paci='pacman -Si'   # info
	alias paclo='pacman -Qdt' # list orphans
	alias pacro='paclo && sudo pacman -Rns $(pacman -Qtdq)' # remove orphans
	alias pacc='pacman -Scc'  # clean cache
	alias paclf='pacman -Ql'  # list files
	alias pac_file_owner='pacman -Qo' # check which package owns a file
fi

# typo savers
alias dc='cd'
alias sl='ls'
alias LS='ls'
alias fuck="echo Ouch! | cowsay -f head-in | lolcat"

# git gud
alias gs='git status'
alias gb='git blame'
alias gl='git log --oneline --color | head -n 30'
alias glg='git log --all --decorate --oneline --graph'
alias gp="git pull --rebase --autostash"
alias gd="git diff"
alias gdwd="git diff --word-diff"
alias gdwdr="git diff --word-diff --word-diff-regex=."
alias gds="git diff --staged"
alias gdswd="git diff --staged --word-diff"
alias gdswdr="git diff --staged --word-diff --word-diff-regex=."
alias gca='git commit --amend'
alias gcara='git commit --amend --reset-author'
alias gpo='git push origin'
alias gpasr='git pull --autostash --rebase'
#alias gfr='git fetch origin master && git rebase FETCH_HEAD'
alias gfr='git pull --rebase'
alias gp='git pull --rebase --autostash'
parse_git_branch() {
	git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}
export PS1='\[\033[01;32m\]\u@\h\[\033[01;37m\] \[\033[01;34m\]\W\[\033[33m\]$(parse_git_branch)\[\033[01;32m\]\$\[\033[00m\] '


# Random shortcuts
#alias gpp="g++ --std=c++17 *.cpp && chmod +x a.out && ./a.out && rm a.out && echo"
function fixcrlf {
	tr -d '\r' < "$1" > /tmp/tmp
	rm "$1"
	mv /tmp/tmp "$1"
}
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
function salert {
	retval=$?
	if [ $? = 0 ]; then
		mpv "https://pvv.ntnu.no/~pederbs/filer/TFH_MadameC_Sing.wav" --no-video --really-quiet
	else
		mpv "https://pvv.ntnu.no/~pederbs/filer/NTR-BKIE-USA-0137.wav" --no-video --really-quiet
	fi
	return $retval
}

function ssh_controlmaster_ls {
    ls ~/.ssh/sockets/ -1 |
    while read line; do
        printf "%s\t\t\t" "$line"
        ssh -O check "$(echo "$line" | rev | cut -d- -f2- | rev)" 2>&1
    done | tr -d '\r'
}

function ssh_controlmaster_kill {
    ssh_controlmaster_list
    ssh_controlmaster_list | grep 'pid=' | cut -d= -f2 | tr -d '() ' | xargs kill --verbose
}

#Some cute shorthands:
#alias http_here="php -S localhost:8081"
alias http_here="python3 -m http.server"
alias myip="curl myip.tf"
alias myip4="curl -4 myip.tf"
alias myip6="curl -6 myip.tf"

# ssh host aliases autocomplete
alias rssh="ssh -l root"
complete -W "$(cat ~/.ssh/config | grep '^Host ' | cut  -b 6- | grep -v "\*")" ssh
complete -W "$(cat ~/.ssh/config | grep '^Host ' | cut  -b 6- | grep -v "\*")" rssh
complete -W "$(cat ~/.ssh/config | grep '^Host ' | cut  -b 6- | grep -v "\*")" vpn
complete -W "$(cat ~/.ssh/config | grep '^Host ' | cut  -b 6- | grep -v "\*")" lvpn
complete -W "$(cat ~/.ssh/config | grep '^Host ' | cut  -b 6- | grep -v "\*")" dvpn

# Jumping around with symbolic links:
# Based on http://jeroenjanssens.com/2013/08/16/quickly-navigate-your-filesystem-from-the-command-line.html
export MARKPATH=$HOME/.marks
function jump {
	pushd . > /dev/null
	cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
}
function mark {
	mkdir -p "$MARKPATH"; ln -s "$(pwd)" "$MARKPATH/$1"
}
function unmark {
	rm -i "$MARKPATH/$1"
}
function marks {
	#ls -l "$MARKPATH" | sed 's/  / /g' | cut -d' ' -f9- | sed 's/ -/\t-/g' && echo
	ls --color=force -l "$MARKPATH" | tr -s ' ' | cut -d' ' -f9- | sed -e 's/ -> /ยง/g' | column -t -s 'ยง' -o ' -> '
}
_completemarks() {
  local curw=${COMP_WORDS[COMP_CWORD]}
  local wordlist=$(find $MARKPATH -type l -printf "%f\n")
  COMPREPLY=($(compgen -W '${wordlist[@]}' -- "$curw"))
  return 0
}
complete -F _completemarks jump unmark


# MOTD
function hello {
	name="$(curl -s 'https://pvv.ntnu.no/~pederbs/names.txt' | grep . | shuf -n 1 -)"
	title="$(curl -s 'https://pvv.ntnu.no/~pederbs/demon_names.txt' | grep . | shuf -n 1 -)"
	error="$(curl -s 'http://pages.cs.wisc.edu/~ballard/bofh/excuses' | grep . | shuf -n 1 -)"
	commit="$(curl -s 'http://whatthecommit.com/index.txt')"
	cow="$(cowsay -l | tail -n +2 | sed -e "s/ /\n/g" | shuf -n 1)"
	printerfact="$(curl -s 'https://printerfacts.cetacean.club/fact')"
	(
		echo "$name the $title found a problem:"
		#echo
		#fortune
		echo
		echo "$error"
		echo
		echo "Issue was fixed by commit #$(uuidgen | cut -d- -f1):"
		echo
		echo "'$commit'"
		echo
		echo "Did you know? $printerfact"
	) | cowsay -f $cow | boxes -d spring -p h4 | lolcat
}

# helpers:
colors() {
	local fgc bgc vals seq0

	printf "Color escapes are %s\n" '\e[${value};...;${value}m'
	printf "Values 30..37 are \e[33mforeground colors\e[m\n"
	printf "Values 40..47 are \e[43mbackground colors\e[m\n"
	printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

	# foreground colors
	for fgc in {30..37}; do
		# background colors
		for bgc in {40..47}; do
			fgc=${fgc#37} # white
			bgc=${bgc#40} # black

			vals="${fgc:+$fgc;}${bgc}"
			vals=${vals%%;}

			seq0="${vals:+\e[${vals}m}"
			printf "  %-9s" "${seq0:-(default)}"
			printf " ${seq0}TEXT\e[m"
			printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
		done
		echo; echo
	done
}

ex () {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2)   tar xjf $1   ;;
			*.tar.gz)    tar xzf $1   ;;
			*.bz2)       bunzip2 $1   ;;
			*.rar)       unrar x $1   ;;
			*.gz)        gunzip $1    ;;
			*.tar)       tar xf $1    ;;
			*.tbz2)      tar xjf $1   ;;
			*.tgz)       tar xzf $1   ;;
			*.zip)       unzip $1     ;;
			*.Z)         uncompress $1;;
			*.7z)        7z x $1      ;;
			*)           echo "'$1' cannot be extracted via ex()" ;;
		esac
	else
		echo "'$1' is not a known archive target"
	fi
}

# Tmux
#alias vsp="tmux split-window -h"

# SSH x11 forwarding
if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
    export GDK_BACKEND=x11
    export WINIT_UNIX_BACKEND=x11
fi


# python
function graph_python_imports {
	pydeps --reverse --noshow --no-output --show-dot "$@"
}
if python -m pudb -h > /dev/null 2> /dev/null; then
	export PYTHONBREAKPOINT="pudb.set_trace"
fi


# pandoc
alias pandoc_mediawiki="pandoc -t mediawiki --filter pandoc-codeblock-include --filter pandoc-crossref --filter pandoc-imagine"
alias pandoc_markdown="pandoc -t gfm --filter pandoc-codeblock-include --filter pandoc-crossref --filter pandoc-imagine"
alias pandoc_html="pandoc -t html --filter pandoc-codeblock-include --filter pandoc-crossref --filter pandoc-imagine --katex"
alias pandoc_tex="pandoc -t latex --filter pandoc-codeblock-include --filter pandoc-crossref --filter pandoc-imagine"
alias pandoc_tex_full="pandoc -t latex --filter pandoc-codeblock-include --filter pandoc-crossref --filter pandoc-imagine --standalone"
function pandoc_through_xelatex {
	VARIABLES=""
	VARIABLES="$VARIABLES --pdf-engine=xelatex"
	VARIABLES="$VARIABLES --filter pandoc-codeblock-include"
	VARIABLES="$VARIABLES --filter pandoc-crossref"
	VARIABLES="$VARIABLES --filter pandoc-imagine"
	VARIABLES="$VARIABLES --highlight-style=pygments" # the default

	if test "$1" == "" ; then
		echo you must supply an input!
	elif test "$2" == "" ; then
		echo you must supply an output!
	else
		source="$1"
		shift
		dest="$1"
		shift
		(
			set -x
			pandoc "$source" $VARIABLES "$@" -o "$dest"
		)
	fi

}
function pandoc_to_pdf {
	VARIABLES=""
	VARIABLES="$VARIABLES --variable papersize=a4paper"
	VARIABLES="$VARIABLES --table-of-contents"
	VARIABLES="$VARIABLES --number-sections"
	#VARIABLES="$VARIABLES --number-offset=0,0"
	VARIABLES="$VARIABLES --variable links-as-notes=true"
	VARIABLES="$VARIABLES --variable geometry:margin=1.4in"
	if test "$1" == "" ; then
		echo you must supply an input!
	elif test "$2" == "" ; then
		echo you must supply an output!
	else
		pandoc_through_xelatex "$@" $VARIABLES
	fi
}
function pandoc_to_beamer_pdf {
	if test "$1" == "" ; then
		echo you must supply an input!
	elif test "$2" == "" ; then
		echo you must supply an output!
	else
		pandoc_through_xelatex "$@" -t beamer
	fi
}


# bat config
export BAT_THEME="gruvbox"


# clang-format
function prettify_c {
	clang-format -style="{BasedOnStyle: Google, IndentWidth: 4}" "$@"
}


# termbin
alias termbin="nc termbin.com 9999"


function salias { # alias command, stripped
	res="$( alias $1 )"
	echo "$res" | cut -d"=" -f2- | cut -c2- | rev | cut -c2- | rev
	if which xclip 2>&1 > /dev/null ; then
		echo "$res" | cut -d"=" -f2- | cut -c2- | rev | cut -c2- | rev | xclip -sel clip
	fi
}



# 1-May-2020: Fix for Keyring error with pip. Hopefully new pip will fix it
# soon https://github.com/pypa/pip/issues/7883
export PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring
