
# ~/.extend.profile

# fixes

#alias fix_touchscreen='sudo bash -c "rmmod wacom && modprobe wacom"'

#alias fix_pulseaudio='pulseaudio -k; pulseaudio --start'

# might depend on '-o reconnect' being set
#alias reload-autofs='sudo killall ssh && sudo systemctl restart autofs && cd .'

function kill_reidun {
	# "at some point it has got to start working again"
	(set -x
		sudo umount -f /mnt/sshfs/reidun
		sudo umount -f /mnt/sshfs/reidun
		sudo umount -f /mnt/sshfs
		sudo umount -f /mnt/sshfs
		sudo killall sshfs
		sudo systemctl restart autofs
		sleep 5
		ls /mnt/sshfs
		ls /mnt/sshfs/reidun
	)
}


alias kill-gvfs='killall gvfsd'
alias kill-gvfs2='killall gvfsd && nautilus -q'

function fix_pulseaudio {
	pulseaudio -k
	sudo killall pulseaudio
##	rm -r ~/.pulse*
#	rm -r ~/.config/pulse/{*.tdb,*-sink,*-source,cookie}
	echo sleep 6
	sleep 6;
	pulseaudio --start
	echo "Comment: alert sound was reset to default"
}

alias teamviewer_start_daemon="(set -x; sudo systemctl start teamviewerd)"


function force_mic_100 {
	volume="50000"
	test -z "$1" || volume=$1

	# fucking webrtc mutes my microphone
	echo Every 0.5 seconds: set volume to $volume / 65535 = $(perl -e "print $volume / 65535" | cut -c-5)
	pacmd list-sources | grep -A 1  "\\* index:"
	sindex="$(pacmd list-sources | grep  "\\* index:" | cut -d":" -f2)"


	while true; do
		printf "\r@%s: pacmd set-source-volume %s %s" $(date +%s) $sindex $volume

		pacmd set-source-volume $sindex $volume

		sleep 0.5
	done
}




# Random shortcuts

function open {
	(
		xdg-open "$@"  &
		disown $!
	) 2>/dev/null >/dev/null
}

alias fork="nohup xterminal  >/dev/null 2>&1 &"

function vpn {
	ip="$(dig +short -x a $1 | tail -n 1)"
	( set -x; sshuttle 0.0.0.0/0 --disable-ipv6 --dns -r "$1" -x $ip -x 127.0.0.1)
}
function lvpn {
	ip="$(dig +short -x a $1 | tail -n 1)"
	( set -x; sshuttle 192.168.0.0/24 --disable-ipv6 -r "$1" -x $ip -x 127.0.0.1 )
}
function dvpn {
	ip="$(dig +short -x a $1 | tail -n 1)"
	( set -x; sshuttle 0.0.0.0/0 --disable-ipv6 -r "$1" -x $ip -x 127.0.0.1 )
}

if [ "$XDG_SESSION_TYPE" == "wayland" ]; then
    alias clip="wl-copy"
    alias clipf="wl-copy"
else
    alias clip="xclip -sel clip -t text/plain"
    function clipf {
    	MIME="$(file --mime-type "$1" -b)"
    	echo $1 "($MIME)"
    	cat "$1" | xclip -sel clip -t "$MIME"
    }
    function clipmd {
    	(
    		echo "\`\`\`"
    		cat
    		echo "\`\`\`"
    	) | clip
    }
    function clip_bmp_to_png {
    	# for use with virtualbox and xfreerdp
    	xclip -sel clip -t image/bmp -o > /tmp/clip.bmp
    	convert /tmp/clip.bmp /tmp/clip.png
    	cat /tmp/clip.png | xclip -sel clip -t image/png
    	rm /tmp/clip.bmp /tmp/clip.png
    }
fi




# Haskell through stack
if which pacman 2>&1 > /dev/null; then
#	alias ghc="stack ghc -dynamic"
	alias ghc="stack ghc"
	alias ghci="stack ghci"
fi

